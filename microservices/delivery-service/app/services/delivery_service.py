from sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy import select\nfrom ..models.delivery import DeliveryPartner, DeliveryLocation, DeliveryStatus\nimport httpx\nfrom supabase import create_client, Client\nimport os\n\nclass DeliveryService:\n    def __init__(self):\n        supabase_url = os.getenv('SUPABASE_URL')\n        supabase_key = os.getenv('SUPABASE_KEY')\n        self.supabase: Client = create_client(supabase_url, supabase_key)\n    \n    @staticmethod\n    async def get_delivery_partner(db: AsyncSession, firebase_uid: str):\n        result = await db.execute(\n            select(DeliveryPartner).where(DeliveryPartner.firebase_uid == firebase_uid)\n        )\n        return result.scalar_one_or_none()\n    \n    @staticmethod\n    async def update_status(db: AsyncSession, firebase_uid: str, status: DeliveryStatus):\n        result = await db.execute(\n            select(DeliveryPartner).where(DeliveryPartner.firebase_uid == firebase_uid)\n        )\n        partner = result.scalar_one_or_none()\n        \n        if partner:\n            partner.status = status\n            await db.commit()\n            await db.refresh(partner)\n        \n        return partner\n    \n    async def update_location(self, db: AsyncSession, firebase_uid: str, latitude: float, longitude: float, order_id: int = None):\n        # Update in PostgreSQL\n        result = await db.execute(\n            select(DeliveryPartner).where(DeliveryPartner.firebase_uid == firebase_uid)\n        )\n        partner = result.scalar_one_or_none()\n        \n        if partner:\n            partner.current_latitude = str(latitude)\n            partner.current_longitude = str(longitude)\n            \n            # Save location history\n            location = DeliveryLocation(\n                delivery_partner_id=partner.id,\n                order_id=order_id,\n                latitude=latitude,\n                longitude=longitude\n            )\n            db.add(location)\n            await db.commit()\n            \n            # Update Supabase for real-time tracking\n            try:\n                self.supabase.table('delivery_locations').insert({\n                    'delivery_partner_id': partner.id,\n                    'order_id': order_id,\n                    'latitude': latitude,\n                    'longitude': longitude\n                }).execute()\n            except Exception as e:\n                print(f\"Supabase update failed: {e}\")\n        \n        return partner\n    \n    @staticmethod\n    async def get_assigned_orders(db: AsyncSession, firebase_uid: str):\n        partner = await DeliveryService.get_delivery_partner(db, firebase_uid)\n        if not partner:\n            return []\n        \n        # Get orders from Order Service\n        try:\n            async with httpx.AsyncClient() as client:\n                response = await client.get(f\"http://order-service:8004/orders/assigned/{partner.id}\")\n                if response.status_code == 200:\n                    return response.json()\n        except:\n            pass\n        \n        return []