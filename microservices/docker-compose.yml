version: '3.8'

services:
  # Infrastructure - Separate databases per service
  auth-db:
    image: postgres:15
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_pass123
    ports:
      - "5433:5432"
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    restart: unless-stopped

  product-db:
    image: postgres:15
    environment:
      POSTGRES_DB: product_db
      POSTGRES_USER: product_user
      POSTGRES_PASSWORD: product_pass123
    ports:
      - "5434:5432"
    volumes:
      - product_db_data:/var/lib/postgresql/data
    restart: unless-stopped

  cart-db:
    image: postgres:15
    environment:
      POSTGRES_DB: cart_db
      POSTGRES_USER: cart_user
      POSTGRES_PASSWORD: cart_pass123
    ports:
      - "5435:5432"
    volumes:
      - cart_db_data:/var/lib/postgresql/data
    restart: unless-stopped

  order-db:
    image: postgres:15
    environment:
      POSTGRES_DB: order_db
      POSTGRES_USER: order_user
      POSTGRES_PASSWORD: order_pass123
    ports:
      - "5436:5432"
    volumes:
      - order_db_data:/var/lib/postgresql/data
    restart: unless-stopped

  delivery-db:
    image: postgres:15
    environment:
      POSTGRES_DB: delivery_db
      POSTGRES_USER: delivery_user
      POSTGRES_PASSWORD: delivery_pass123
    ports:
      - "5437:5432"
    volumes:
      - delivery_db_data:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  meilisearch:
    image: getmeili/meilisearch:v1.5
    ports:
      - "7700:7700"
    environment:
      MEILI_MASTER_KEY: dummy-master-key-123
    volumes:
      - meilisearch_data:/meili_data

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8001
      - PRODUCT_SERVICE_URL=http://product-service:8002
      - CART_SERVICE_URL=http://cart-service:8003
      - ORDER_SERVICE_URL=http://order-service:8004
      - DELIVERY_SERVICE_URL=http://delivery-service:8005
      - NOTIFICATION_SERVICE_URL=http://notification-service:8006
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
      - auth-service
      - product-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Auth Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql+asyncpg://auth_user:auth_pass123@auth-db:5432/auth_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - auth-db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Product Service
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql+asyncpg://product_user:product_pass123@product-db:5432/product_db
      - MEILISEARCH_URL=http://meilisearch:7700
      - MEILISEARCH_MASTER_KEY=dummy-master-key-123
    depends_on:
      - product-db
      - meilisearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cart Service
  cart-service:
    build:
      context: ./cart-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql+asyncpg://cart_user:cart_pass123@cart-db:5432/cart_db
      - REDIS_URL=redis://redis:6379/0
      - AUTH_SERVICE_URL=http://auth-service:8001
      - PRODUCT_SERVICE_URL=http://product-service:8002
    depends_on:
      - cart-db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql+asyncpg://order_user:order_pass123@order-db:5432/order_db
      - AUTH_SERVICE_URL=http://auth-service:8001
      - CART_SERVICE_URL=http://cart-service:8003
      - NOTIFICATION_SERVICE_URL=http://notification-service:8006
    depends_on:
      - order-db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Delivery Service
  delivery-service:
    build:
      context: ./delivery-service
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      - DATABASE_URL=postgresql+asyncpg://delivery_user:delivery_pass123@delivery-db:5432/delivery_db
      - SUPABASE_URL=${SUPABASE_URL:-https://ktpugnrihesretpdzbkn.supabase.co}
      - SUPABASE_KEY=${SUPABASE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt0cHVnbnJpaGVzcmV0cGR6YmtuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE3ODYzODAsImV4cCI6MjA2NzM2MjM4MH0.ZLhDDC8b_JUfTvt6yPxl8yk8l4F9DDHNTEWIaBVfQ84}
    depends_on:
      - delivery-db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "8006:8006"
    environment:
      - FCM_SERVER_KEY=${FCM_SERVER_KEY:-AAAA1234567890:APA91bHdummy_fcm_server_key_for_development}
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  auth_db_data:
  product_db_data:
  cart_db_data:
  order_db_data:
  delivery_db_data:
  redis_data:
  meilisearch_data: